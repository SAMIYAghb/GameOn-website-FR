function isFirstnameValid() {
  // trim is a method that escapes any space before and after a string
  return firstName.value.trim().length >= 2;
    // trim is a method that escapes any space before and after a string
    // const isValid = firstNameInput.value.trim().length >= 2;

    // Get the error message element
   
    // const errorMessageElement = document.getElementById("error-message");
  
    // Display or hide the error message based on validation result
    // if (!isValid) {
      // errorDiv.classList.add("error");

//       errorDiv.innerText = "First name must be at least 2 characters long.";
//     } else {
//       errorDiv.innerText = ""; // Clear the error message if the input is valid
//     }
  
//     return isValid;
// }
/*start validation form*/
// function verifierChamp (champs) {
//   if (champs.value.length < 2) {
//     console.log('Le champs dois contenir au moins deux lettres');
//     // champs.classList.add("error")
//     return false;  
//   }else{
//       console.log('parfait');
//       // champs.classList.remove("error")
//       return true;   
//     }
//   }

//   function verifierEmail (email) {
//     const emailRegexExp = new RegExp("[a-z0-9._-]+@[a-z0-9._-]+\\.[a-z0-9._-]+");
//     if (emailRegexExp.test(email.value)) {
//       console.log('email valide');
//       // champs.classList.add("error")
//     }else{
//         console.log('email invalide');
//         // champs.classList.remove("error")
//       }
//     }
// form.addEventListener("submit", (event) => {
//   // On empêche le comportement par défaut
//   event.preventDefault();

//   if(
//     verifierChamp(firstName)
//   && verifierChamp(lastName)
//   &&verifierEmail(email)
//  ){
//   alert("bravo");
//     // submitSucess_message.style.display = "block";
//     // setTimeout(showSuccessScreen, 2000);
//   }
//   // Vérifier la longueur du prénom
//     // verifierChamp(firstName);

//   // Vérifier la longueur du nom
//     // verifierChamp(lastName);

//     // verifierEmail(email);

// });
// ************
//verifier les champs en direct
// firstName.addEventListener("change", () => {
//   verifierChamp(firstName);
// })
// lastName.addEventListener("change", () => {
//   verifierChamp(lastName);
// })
// firstName.addEventListener("change", () => {
//   verifierChamp(firstName);
// })
/*end validation form*/


// /*start checkbox validation */
// /** Ajouter event listeners pour les deux checkboxes */
// conditionAcceptCheckbox1.addEventListener("click", AcceptCondition);
// conditionAcceptCheckbox2.addEventListener("click", AcceptCondition);

// function AcceptCondition(e){
// // Check si le checkbox1 est checked
// const isChecked1 = e.target.checked;
// // Check si checkbox2 est checked
// // const isChecked2 = e.target.checked;

//   //   //desable btn si l'utilisateur n'a pas accepter les condition d'utilisations
//     // if(!isChecked1 && !isChecked2){
//     if(!isChecked1){
//       submitBtn.setAttribute("disabled","");
//       conditionAcceptCheckbox1.setAttribute("data-error", "Vous devez accepter les conditions d'utilisations");
//     }else{
//       submitBtn.removeAttribute("disabled");
//     }
//   }

//   /*end checkbox validation *
*************************
// DOM Elements
const modalBackground = document.querySelector(".bground");
const modalCloseButton = document.querySelector(".close");
const modalButtons = document.querySelectorAll(".modal-btn");
// const formInputContainer = document.querySelectorAll(".formData");
const form = document.querySelector('form');
const modalConfirm = document.querySelector(".modal-confirmation");
// On récupère les champs
const firstName= document.querySelector("#first");
const lastName = document.querySelector("#last");
const email = document.querySelector("#email");
const birthdate = document.querySelector("#birthdate");
const condition = document.getElementById("checkbox1");
const quantity = document.getElementById("quantity");
const tournameLocation = document.getElementsByName("location");
const submitBtn = document.querySelector('.btn-submit');

// launch modal event
modalButtons.forEach((btn) => btn.addEventListener("click", launchModal));

// launch modal form *lance
function launchModal() {
  modalBackground.classList.add("active");
}

function editNav() {
  const topnav = document.getElementById("myTopnav");
  topnav.classList.toggle("responsive");
}
 
//close modal
modalCloseButton.addEventListener("click",closeModal)
//close modal function
function closeModal(){
  modalBackground.classList.remove('active');
}

 // Check si inputs sont valid
// function isFirstnameValid() {
//   // trim is a method that escapes any space before and after a string
//   // return firstName.value.trim().length >= 2;
//   const trimmedFirstName = firstName.value.trim();
//   if (trimmedFirstName === '') {
//     // Afficher un message d'erreur pour le nom de famille vide
//     showErrormessage(firstName, "Veuillez entrer votre prénom.");
//     return false;
//   }

//   // Vérifier la longueur du nom de famille
//   const isValid = trimmedFirstName.length >= 2;
//   if (!isValid) {
//     // Afficher un message d'erreur pour un prénom trop court
//     showErrormessage(firstName, "Le prénom doit contenir au moins 2 caractères.");
//   } else {
//     // Effacer les messages d'erreur précédents pour le prénom
//     clearErrorMessages(firstName);
//   }

//   return isValid;

// }

function isFirstnameValid() {
  const trimmedFirstName = firstName.value.trim();
  if (trimmedFirstName === '') {
    // Afficher un message d'erreur pour le prénom vide
    showErrormessage(firstName, "Veuillez entrer votre prénom.");
    return false;
  }

  // Vérifier la longueur du prénom
  const isValid = trimmedFirstName.length >= 2;
  if (!isValid) {
    // Afficher un message d'erreur pour un prénom trop court
    showErrormessage(firstName, "Le prénom doit contenir au moins 2 caractères.");
  } else {
    // Effacer les messages d'erreur précédents pour le prénom
    clearErrorMessages(firstName);
  }

  return isValid;
}
  
function isLastnameValid() {
  // return lastName.value.trim().length >= 2;
  const trimmedLastName = lastName.value.trim();
  if (trimmedLastName === '') {
    // Afficher un message d'erreur pour le nom de famille vide
    showErrormessage(lastName, "Veuillez entrer votre nom de famille.");
    return false;
  }

  // Vérifier la longueur du nom de famille
  const isValid = trimmedLastName.length >= 2;
  if (!isValid) {
    // Afficher un message d'erreur pour un nom de famille trop court
    showErrormessage(lastName, "Le nom de famille doit contenir au moins 2 caractères.");
  } else {
    // Effacer les messages d'erreur précédents pour le nom de famille
    clearErrorMessages(lastName);
  }

  return isValid;
}

function isEmailValid() {
  const trimmedEmail = email.value.trim();
  if (trimmedEmail === '') {
    // Si l'email est vide, on retourne false
    showErrormessage(email, "Veuillez entrer une adresse e-mail.");
    return false;
  }
  const isValid = /[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z0-9]{1,5}/.test(email.value);
  console.log('Email validation result:', isValid);
  return isValid;
}

function isBirthdateValid() {
  const isDateFormatValid = /[0-9]{4}-[0-9]{2}-[0-9]{2}/.test(birthdate.value);
  if (!isDateFormatValid) {
    return false;
  }
  const date = new Date(birthdate.value);
  const currentDate = new Date();
  return date.getFullYear() <= currentDate.getFullYear()
}

// la méthode checkValidity() qui est intégrée dans le navigateur pour les éléments de formulaire. Elle effectue toutes les validations définies par les attributs HTML tels que required, min, max, etc.
// function isQuantityValid() {
//   // return quantity.value >= 0;
//   return quantity.checkValidity();
//   // const isValid = quantity.checkValidity();
//   // Retournez la validité du champ
//   // return isValid;
// }
function isQuantityValid() {
  // Vérifier la validité du champ de quantité
  const isValid = quantity.checkValidity();

  if (!isValid) {
    // Afficher un message d'erreur pour la quantité invalide
    showErrormessage(quantity, "Veuillez entrer une quantité valide.");
  } else {
    // Effacer les messages d'erreur précédents pour la quantité
    clearErrorMessages(quantity);
  }

  return isValid;
}

// function isLocationValid() {
//   for (let i = 0; tournameLocation.length > i; i++) {
//     if (tournameLocation[i].checked) {
//       return true;
//     }
//   }
//   return false;
// }
function isLocationValid() {
  let isSelected = false;

  for (let i = 0; tournameLocation.length > i; i++) {
    if (tournameLocation[i].checked) {
      isSelected = true;
      break;
    }
  }

  if (!isSelected) {
    // Aucune location n'a été sélectionnée, afficher un message d'erreur
    showErrormessage(tournameLocation[0], "Vous devez choisir une option.");
  }

  return isSelected;
}

// function isConditionValid() {
//   if (!condition.checked) {
//     return false
//   }
//   return true;
// }
function isConditionValid() {
  if (!condition.checked) {
    // La condition n'est pas validée, afficher un message d'erreur
    showErrormessage(condition, "Vous devez vérifier que vous acceptez les termes et conditions.");
    return false;
  }
  return true;
}

// function pour verifier si le form (all inputs) sont valid ou non
function isFormValid() {
  return isFirstnameValid()
    && isLastnameValid()
    && isEmailValid()
    && isBirthdateValid()
    && isQuantityValid()
    && isLocationValid()
    && isConditionValid()
}

// fonction pour afficher les messages d'erreur
function showErrormessage(element, message) {
  // element.textContent = message;
// Vérifier si l'élément existe
if (element) {
  // Trouver le conteneur du champ (form-data)
  const formInputContainer = element.closest('.formData');
  // Vérifier si le conteneur existe
  if (formInputContainer) {
     // Créer un élément div pour le message d'erreur
    let errorDiv = document.createElement("div");
    errorDiv.textContent = message;
    errorDiv.classList.add("error-message");
     // Ajouter le message d'erreur au conteneur
     formInputContainer.appendChild(errorDiv);
  }
}
}
// fonction pour effacer les messages d'erreur précédents
function clearErrorMessages(element) {
  // Supprimer tous les éléments avec la classe "error-message"
  let existingErrorMessages = element.parentElement.querySelectorAll(".error-message");
  existingErrorMessages.forEach((error) => error.remove());
}
// Ajouter un conteneur pour les messages d'erreur globaux
// const errorMessageContainer = document.createElement("div");
// errorMessageContainer.id = "error-message-container";
// form.appendChild(errorMessageContainer);


form.addEventListener("submit", (event) => {
  //   // On empêche le comportement par défaut
    event.preventDefault();

     // Effacer les messages d'erreur précédents
  clearErrorMessages(firstName);
  clearErrorMessages(lastName);
  clearErrorMessages(email);
  clearErrorMessages(birthdate);
  clearErrorMessages(quantity);
  // clearErrorMessages(tournameLocation);
  tournameLocation.forEach(element => clearErrorMessages(element));
  clearErrorMessages(condition);

  

  // Vérifier chaque champ et afficher un message d'erreur si nécessaire
    if (!isFirstnameValid()) {
      // console.log('errnfirst');
      // showErrormessage(firstName, "Veuillez entrer 2 caractères ou plus pour le champ du prénom.");
    }
    if (!isLastnameValid()) {
      // console.log('errnlast');
      // showErrormessage(lastName, "Veuillez entrer 2 caractères ou plus pour le champ du nom.")
    }
    if (!isEmailValid()) {
      // console.log('errnemail');
      // showErrormessage(email, "Veuillez renseigner une adresse mail valide. Exemple : nom@contact.fr")
    }
    if (!isBirthdateValid()) {
      // console.log('dat');
      showErrormessage(birthdate, "Veuillez renseigner votre date de naissance au bon format.")
    }
    if (!isQuantityValid()) {
      // console.log('errqa');
      showErrormessage(quantity, "Veuillez renseigner ce champ.")
    }
    if (!isLocationValid()) {
      // console.log('loc');
      // showErrormessage(tournameLocation, "Vous devez choisir une option.")
    }
    if (!isConditionValid()) {
      // console.log("condt");
      // showErrormessage(condition, "Vous devez vérifier que vous acceptez les termes et conditions.")
    }
    if (isFormValid()) {
      console.log("errNotsSubmit");
      // Soumettre le formulaire si tous les champs sont valides
       // Form submit
    form.submit();
    closeModal();

  modalConfirm.style.display = "block";

    
    } 
  // else {
  //     // Afficher un message global
  //   // Supprimer tous les messages d'erreur précédents
  //     errorMessageContainer.innerHTML = '';
  //     rrorGlobalMessage.textContent = "Le formulaire est invalide. Veuillez remplir tous les champs.";
  //   errorGlobalMessage.classList.add("error-message");

  //   // Ajouter le message global au conteneur
  //   errorMessageContainer.appendChild(errorGlobalMessage);
  // }
});

